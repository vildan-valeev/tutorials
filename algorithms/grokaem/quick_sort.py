"""
Быстрая сортировка

В этом алгоритме мы разбиваем список при помощи опорного элемента, сортируя значения вокруг него.
В нашей реализации мы выбрали опорным элементом последний элемент массива. Наилучшая производительность достигается
тогда, когда опорный элемент делит список примерно пополам.

Алгоритм быстрой сортировки:

    рекурсивный;
    неустойчивый;
    преобразует входные данные без использования вспомогательной структуры данных (in place);
    имеет сложность O(nlog(n));
"""

def quick_sort(arr):
    if len(arr) < 2:
        return arr
    else:
        pivot = arr[0]
        less = [i for i in arr[1:] if i <= pivot]
        greater = [i for i in arr[1:] if i > pivot]
        return quick_sort(less) + [pivot] + quick_sort(greater)

print(quick_sort([1,3,5,30,12,4,60,18]))
